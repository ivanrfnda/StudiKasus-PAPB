//DAO//

/*
 * ItemDao adalah nama dari interface DAO untuk Room Database.
 * DAO berfungsi sebagai lapisan untuk operasi CRUD (Create, Read, Update, Delete) 
 * pada tabel database yang diwakili oleh entitas `Item`.
 */
@Dao
interface ItemDao {

    /*
     * @Insert menentukan bahwa fungsi akan melakukan operasi INSERT ke dalam database.
     * @parameter item merupakan objek yang akan dimasukkan ke dalam tabel.
     * @OnConflictStrategy.IGNORE berfungsi untuk mengabaikan operasi jika terjadi konflik.
     * @suspend merupakan fungsi penangguhan sehingga harus dipanggil dalam coroutine.
     */
    @Insert(onConflict = OnConflictStrategy.IGNORE)
    suspend fun insert(item: Item)

    /*
     * Fungsi update digunakan untuk memperbarui data yang sudah ada dalam tabel `items`.
     * @Update menentukan bahwa fungsi akan melakukan operasi UPDATE pada baris tabel.
     * @parameter item merupakan objek yang diubah dan akan dimasukkan ke dalam tabel. 
     * Objek tersebut harus memiliki primary key yang cocok dengan entri yang ada di database.
     * @suspend merupakan fungsi penangguhan sehingga harus dipanggil dalam coroutine.
     */
    @Update
    suspend fun update(item: Item)

    /*
     * Fungsi delete digunakan untuk menghapus data dari tabel `items`.
     * @Delete menentukan bahwa fungsi akan melakukan operasi DELETE pada baris tabel.
     * @parameter item merupakan objek yang akan dihapus dari tabel. Objek ini harus memiliki primary key
     * yang cocok dengan entri yang ada di database.
     * @suspend merupakan fungsi penangguhan sehingga harus dipanggil dalam coroutine.
     */
    @Delete
    suspend fun delete(item: Item)

    /*
     * Fungsi getItem digunakan untuk mengambil satu entri dari tabel `items` berdasarkan id.
     * @Query merupakan anotasi yang memungkinkan penulisan kueri SQL secara manual.
     * "SELECT * from items WHERE id = :id" berfungsi mengambil semua kolom dari tabel `items` 
     * di mana kolom `id` cocok dengan parameter fungsi `id`.
     * @parameter id adalah ID dari entri yang ingin diambil.
     * @return berfungsi mengembalikan objek `Item` dalam bentuk Flow.
     */
    @Query("SELECT * from items WHERE id = :id")
    fun getItem(id: Int): Flow<Item>

    /*
     * Fungsi getAllItems digunakan untuk mengambil semua entri dari tabel `items` dalam urutan nama secara ascending.
     * @Query merupakan anotasi yang memungkinkan penulisan kueri SQL secara manual.
     * "SELECT * from items ORDER BY name ASC" berfungsi mengambil semua kolom dari tabel `items` 
     * dan mengurutkannya berdasarkan kolom `name` dalam urutan naik.
     * @return berfungsi mengembalikan daftar semua entri `Item` dalam bentuk Flow, yang memungkinkan
     * UI untuk merespons perubahan data secara otomatis.
     */
    @Query("SELECT * from items ORDER BY name ASC")
    fun getAllItems(): Flow<List<Item>>
}
